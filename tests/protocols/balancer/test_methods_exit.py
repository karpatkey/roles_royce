from roles_royce.protocols import balancer
from roles_royce.protocols.balancer.utils import Pool

from ...utils import local_node_eth

stable_pool_pid = "0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd000200000000000000000249"
metastable_pool_pid = "0x1e19cf2d73a72ef1332c882f20534b6519be0276000200000000000000000112"
composable_stable_pool_pid = "0x42ed016f826165c2e5976fe5bc3df540c5ad0af700000000000000000000058b"
weighted_pool_pid = "0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014"

bb_a_USD_pid = "0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080"

avatar_address = "0x0bEcEb88bf999727F52f0f8EfeD66d92c089BD45"
roles_mod_address = "0xf20325cf84b72e8BBF8D8984B8f0059B984B390B"
asset1 = "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0"
asset2 = "0x0000000000000000000000000000000000000000"
asset3 = "0xBA485b556399123261a5F9c95d413B4f93107407"

block = 17658530
block_composable = 18238491


# --------------------------------------------------------------------------------------------------------------------
# Exit - Exact BPT Single Token
# --------------------------------------------------------------------------------------------------------------------


def test_exit_pool_exact_bpt_single_stable(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    assets = Pool(w3, stable_pool_pid).assets()
    bpt_amount_in = 16991614618808728544
    exit_token_index = 1
    token_out_address = assets[exit_token_index]

    m = balancer.ExactBptSingleTokenQueryExit(
        w3=w3, pool_id=stable_pool_pid, bpt_amount_in=bpt_amount_in, token_out_address=token_out_address
    )

    bpt_in, amounts_out = m.call(web3=w3, block_identifier=block)
    assert bpt_in == bpt_amount_in
    assert amounts_out == [0, 17581059303248605949]

    # allow 1% slippage
    min_amount_out = [int(amount * 0.99) for amount in amounts_out][exit_token_index]

    m = balancer.ExactBptSingleTokenExit(
        w3=w3,
        pool_id=stable_pool_pid,
        avatar=avatar_address,
        bpt_amount_in=bpt_in,
        token_out_address=token_out_address,
        min_amount_out=min_amount_out,
    )

    assert (
        m.data
        == "0x8bdb39133dd0843a028c86e0b760b1a76929d1c5ef93a2dd0002000000000000000002490000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005c6ee304399dbdb9c8ef030ab642b10820db8f56000000000000000000000000616e8bfa43f920657b3497dbf40d6b1a02d4608d00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f18bdd7c27c1f00000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebce57786a6dbbe00000000000000000000000000000000000000000000000000000000000000001"
    )


def test_exit_pool_exact_bpt_single_metastable(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    assets = Pool(w3, metastable_pool_pid).assets()
    exit_token_index = 1
    token_out_address = assets[exit_token_index]
    bpt_amount_in = 16991614618808728544

    m = balancer.ExactBptSingleTokenQueryExit(
        w3=w3, pool_id=metastable_pool_pid, bpt_amount_in=bpt_amount_in, token_out_address=token_out_address
    )

    bpt_in, amounts_out = m.call(web3=w3, block_identifier=block)
    assert bpt_in == bpt_amount_in
    assert amounts_out == [0, 17393745797907358160]

    # allow 1% slippage
    min_amount_out = [int(amount * 0.99) for amount in amounts_out][exit_token_index]

    m = balancer.ExactBptSingleTokenExit(
        w3=w3,
        pool_id=metastable_pool_pid,
        avatar=avatar_address,
        bpt_amount_in=bpt_in,
        token_out_address=token_out_address,
        min_amount_out=min_amount_out,
    )

    assert (
        m.data
        == "0x8bdb39131e19cf2d73a72ef1332c882f20534b6519be02760002000000000000000001120000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ae78736cd615f374d3085123a210448e74fc6393000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eef90c7361bbf80000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebce57786a6dbbe00000000000000000000000000000000000000000000000000000000000000001"
    )


def test_exit_pool_exact_bpt_single_composable_stable(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block_composable)

    assets = Pool(w3, composable_stable_pool_pid).assets()
    bpt_amount_in = 1699161461880870000
    exit_token_index = 1  # 0 is the BPT token itself
    token_out_address = assets[exit_token_index]
    m = balancer.ExactBptSingleTokenQueryExit(
        w3=w3, pool_id=composable_stable_pool_pid, bpt_amount_in=bpt_amount_in, token_out_address=token_out_address
    )

    bpt_in, amounts_out = m.call(web3=w3)
    assert bpt_in == bpt_amount_in
    assert amounts_out == [0, 0, 1613884082247959060, 0]

    # allow 1% slippage
    min_amount_out = [int(amount * 0.99) for amount in amounts_out][exit_token_index]

    m = balancer.ExactBptSingleTokenExit(
        w3=w3,
        pool_id=composable_stable_pool_pid,
        avatar=avatar_address,
        min_amount_out=min_amount_out,
        bpt_amount_in=bpt_in,
        token_out_address=token_out_address,
    )  # 1 is the BPT token itself

    assert (
        m.data
        == "0x8bdb391342ed016f826165c2e5976fe5bc3df540c5ad0af700000000000000000000058b0000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd4500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000042ed016f826165c2e5976fe5bc3df540c5ad0af70000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ae78736cd615f374d3085123a210448e74fc639300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001794a258d77154700000000000000000000000000000000000000000000000000000000000000001"
    )


def test_exit_pool_exact_bpt_single_weighted(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    assets = Pool(w3, weighted_pool_pid).assets()
    bpt_amount_in = 16991614618808728544
    exit_token_index = 1
    token_out_address = assets[exit_token_index]

    m = balancer.ExactBptSingleTokenQueryExit(
        w3=w3, pool_id=weighted_pool_pid, bpt_amount_in=bpt_amount_in, token_out_address=token_out_address
    )

    bpt_in, amounts_out = m.call(web3=w3, block_identifier=block)
    assert bpt_in == bpt_amount_in
    assert amounts_out == [0, 117198151054475290]

    # allow 1% slippage
    min_amount_out = [int(amount * 0.99) for amount in amounts_out][exit_token_index]

    m = balancer.ExactBptSingleTokenExit(
        w3=w3,
        pool_id=weighted_pool_pid,
        avatar=avatar_address,
        bpt_amount_in=bpt_in,
        token_out_address=token_out_address,
        min_amount_out=min_amount_out,
    )

    assert (
        m.data
        == "0x8bdb39135c6ee304399dbdb9c8ef030ab642b10820db8f560002000000000000000000140000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019c352fbc50b2b000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebce57786a6dbbe00000000000000000000000000000000000000000000000000000000000000001"
    )


# --------------------------------------------------------------------------------------------------------------------
# Exit - Exact BPT proportional
# --------------------------------------------------------------------------------------------------------------------


def test_exit_pool_exact_bpt_proportional_stable(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    bpt_amount_in = 169916146188087
    m = balancer.ExactBptProportionalQueryExit(w3=w3, pool_id=stable_pool_pid, bpt_amount_in=bpt_amount_in)

    bpt_in, amounts_out = m.call(web3=w3, block_identifier=block)
    assert bpt_in == bpt_amount_in
    assert amounts_out == [77495663410354, 98179457247112]

    # allow 1% slippage
    amounts_out = [int(amount * 0.99) for amount in amounts_out]

    m = balancer.ExactBptProportionalExit(
        w3=w3, pool_id=stable_pool_pid, avatar=avatar_address, min_amounts_out=amounts_out, bpt_amount_in=bpt_in
    )

    assert (
        m.data
        == "0x8bdb39133dd0843a028c86e0b760b1a76929d1c5ef93a2dd0002000000000000000002490000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005c6ee304399dbdb9c8ef030ab642b10820db8f56000000000000000000000000616e8bfa43f920657b3497dbf40d6b1a02d4608d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000045c6ee796cba0000000000000000000000000000000000000000000000000000586698281ed00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000009a89af88ff37"
    )


def test_exit_pool_exact_bpt_proportional_metastable(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    bpt_amount_in = 169916146188087
    m = balancer.ExactBptProportionalQueryExit(w3=w3, pool_id=metastable_pool_pid, bpt_amount_in=bpt_amount_in)

    bpt_in, amounts_out = m.call(web3=w3, block_identifier=block)
    assert bpt_in == bpt_amount_in
    assert amounts_out == [80488366084400, 87335658448709]

    # allow 1% slippage
    amounts_out = [int(amount * 0.99) for amount in amounts_out]

    m = balancer.ExactBptProportionalExit(
        w3=w3, pool_id=metastable_pool_pid, avatar=avatar_address, min_amounts_out=amounts_out, bpt_amount_in=bpt_in
    )

    assert (
        m.data
        == "0x8bdb39131e19cf2d73a72ef1332c882f20534b6519be02760002000000000000000001120000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ae78736cd615f374d3085123a210448e74fc6393000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000004878c1aa110400000000000000000000000000000000000000000000000000004ea312ca011d0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000009a89af88ff37"
    )


def test_exit_pool_exact_bpt_proportional_composable_stable(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block_composable)

    bpt_amount_in = 27506842240670593572
    m = balancer.ExactBptProportionalQueryExit(w3=w3, pool_id=composable_stable_pool_pid, bpt_amount_in=bpt_amount_in)

    bpt_in, amounts_out = m.call(web3=w3)
    assert bpt_in == bpt_amount_in
    assert amounts_out == [0, 4228014765242451885, 18398261144675749406, 3084744656337673758]

    # allow 1% slippage
    amounts_out = [int(amount * 0.99) for amount in amounts_out]

    m = balancer.ExactBptProportionalExit(
        w3=w3,
        pool_id=composable_stable_pool_pid,
        avatar=avatar_address,
        min_amounts_out=amounts_out,
        bpt_amount_in=bpt_in,
    )

    assert (
        m.data
        == "0x8bdb391342ed016f826165c2e5976fe5bc3df540c5ad0af700000000000000000000058b0000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd4500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000042ed016f826165c2e5976fe5bc3df540c5ad0af70000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ae78736cd615f374d3085123a210448e74fc6393000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a16b7752d825400000000000000000000000000000000000000000000000000fcc61dd2952318000000000000000000000000000000000000000000000000002a619f5501275000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000017dbbef47c7e17224"
    )


def test_exit_pool_exact_bpt_proportional_weighted(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    bpt_amount_in = 169916146188087
    m = balancer.ExactBptProportionalQueryExit(w3=w3, pool_id=weighted_pool_pid, bpt_amount_in=bpt_amount_in)

    bpt_in, amounts_out = m.call(web3=w3)
    assert bpt_in == bpt_amount_in
    assert amounts_out == [381328743127738, 236287148756]

    # allow 1% slippage
    amounts_out = [int(amount * 0.99) for amount in amounts_out]

    m = balancer.ExactBptProportionalExit(
        w3=w3, pool_id=weighted_pool_pid, avatar=avatar_address, min_amounts_out=amounts_out, bpt_amount_in=bpt_in
    )

    assert (
        m.data
        == "0x8bdb39135c6ee304399dbdb9c8ef030ab642b10820db8f560002000000000000000000140000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000157592aa24e4c0000000000000000000000000000000000000000000000000000003676f934140000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000009a89af88ff37"
    )


# --------------------------------------------------------------------------------------------------------------------
# Exit - Exact Tokens
# --------------------------------------------------------------------------------------------------------------------


def test_exit_pool_exact_stable(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    amounts_out = [381328743127738, 2362871487560]

    m = balancer.ExactTokensQueryExit(w3=w3, pool_id=stable_pool_pid, amounts_out=amounts_out)

    bpt_in, amounts_out = m.call(web3=w3)
    assert bpt_in == bpt_in
    assert amounts_out == [381328743127738, 2362871487560]

    # allow 1% slippage
    max_bpt_amount_in = int(bpt_in * (1 + 0.01))
    m = balancer.ExactTokensExit(
        w3=w3,
        pool_id=stable_pool_pid,
        avatar=avatar_address,
        amounts_out=amounts_out,
        max_bpt_amount_in=max_bpt_amount_in,
    )

    assert (
        m.data
        == "0x8bdb39133dd0843a028c86e0b760b1a76929d1c5ef93a2dd0002000000000000000002490000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005c6ee304399dbdb9c8ef030ab642b10820db8f56000000000000000000000000616e8bfa43f920657b3497dbf40d6b1a02d4608d000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000015ad10446daba00000000000000000000000000000000000000000000000000000226261d9c4800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000001565d0a1262a5000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000015ad10446daba00000000000000000000000000000000000000000000000000000226261d9c48"
    )


def test_exit_pool_exact_metastable(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    amounts_out = [381328743127738, 2362871487560]

    m = balancer.ExactTokensQueryExit(w3=w3, pool_id=metastable_pool_pid, amounts_out=amounts_out)

    bpt_in, amounts_out = m.call(web3=w3)
    assert bpt_in == bpt_in
    assert amounts_out == [381328743127737, 2362871487560]

    # allow 1% slippage
    max_bpt_amount_in = int(bpt_in * (1 + 0.01))
    m = balancer.ExactTokensExit(
        w3=w3,
        pool_id=metastable_pool_pid,
        avatar=avatar_address,
        amounts_out=amounts_out,
        max_bpt_amount_in=max_bpt_amount_in,
    )

    assert (
        m.data
        == "0x8bdb39131e19cf2d73a72ef1332c882f20534b6519be02760002000000000000000001120000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ae78736cd615f374d3085123a210448e74fc6393000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000015ad10446dab900000000000000000000000000000000000000000000000000000226261d9c4800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000001727211f11e02000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000015ad10446dab900000000000000000000000000000000000000000000000000000226261d9c48"
    )


def test_exit_pool_exact_composable(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block_composable)

    # The amount of BPT should not be included in the amounts_out
    amounts_out = [2228014765242451885, 1144675749406, 3784744656337673758]

    m = balancer.ExactTokensQueryExit(w3=w3, pool_id=composable_stable_pool_pid, amounts_out=amounts_out)

    bpt_in, amounts_out_sim = m.call(web3=w3)
    assert bpt_in == 6625344863432333990
    assert amounts_out_sim[1] == 2228014765242451884
    assert amounts_out_sim[2] == 1144675749405
    assert amounts_out_sim[3] == 3784744656337673757

    # allow 1% slippage
    max_bpt_amount_in = int(bpt_in * (1 + 0.01))
    m = balancer.ExactTokensExit(
        w3=w3,
        pool_id=composable_stable_pool_pid,
        avatar=avatar_address,
        amounts_out=amounts_out,
        max_bpt_amount_in=max_bpt_amount_in,
    )

    assert (
        m.data
        == "0x8bdb391342ed016f826165c2e5976fe5bc3df540c5ad0af700000000000000000000058b0000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd4500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000042ed016f826165c2e5976fe5bc3df540c5ad0af70000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ae78736cd615f374d3085123a210448e74fc639300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000001eeb7f9fdc9a07ad0000000000000000000000000000000000000000000000000000010a83fdce1e00000000000000000000000000000000000000000000000034861d3666909e1e00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000005cdd553612562c0000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000001eeb7f9fdc9a07ad0000000000000000000000000000000000000000000000000000010a83fdce1e00000000000000000000000000000000000000000000000034861d3666909e1e"
    )


def test_exit_pool_exact_weighted(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    amounts_out = [381328743127738, 2362871487560]

    m = balancer.ExactTokensQueryExit(w3=w3, pool_id=weighted_pool_pid, amounts_out=amounts_out)

    bpt_in, amounts_out = m.call(web3=w3)
    assert bpt_in == bpt_in
    assert amounts_out == [381328743127738, 2362871487560]

    # allow 1% slippage
    max_bpt_amount_in = int(bpt_in * (1 + 0.01))
    m = balancer.ExactTokensExit(
        w3=w3,
        pool_id=weighted_pool_pid,
        avatar=avatar_address,
        amounts_out=amounts_out,
        max_bpt_amount_in=max_bpt_amount_in,
    )

    assert (
        m.data
        == "0x8bdb39135c6ee304399dbdb9c8ef030ab642b10820db8f560002000000000000000000140000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000015ad10446daba00000000000000000000000000000000000000000000000000000226261d9c4800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000001b7909c6eff35000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000015ad10446daba00000000000000000000000000000000000000000000000000000226261d9c48"
    )


# --------------------------------------------------------------------------------------------------------------------
# Exit - Exact Single Token Proportional Tx
# --------------------------------------------------------------------------------------------------------------------


def test_exit_pool_exact_single_proportional_stable_tx(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    assets = Pool(w3, stable_pool_pid).assets()
    token_out_address = assets[0]
    amount_out = 16991614618808700

    m = balancer.ExactSingleTokenProportionalExitSlippage(
        w3=w3,
        pool_id=stable_pool_pid,
        avatar=avatar_address,
        token_out_address=token_out_address,
        amount_out=amount_out,
        max_slippage=0.01,
    )

    assert (
        m.data
        == "0x8bdb39133dd0843a028c86e0b760b1a76929d1c5ef93a2dd0002000000000000000002490000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005c6ee304399dbdb9c8ef030ab642b10820db8f56000000000000000000000000616e8bfa43f920657b3497dbf40d6b1a02d4608d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000003c5dc89183b17c000000000000000000000000000000000000000000000000004c7a8c84d0fcf300000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000085aebe25b6f54f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000003c5dc89183b17c000000000000000000000000000000000000000000000000004c7a8c84d0fcf3"
    )
    assert m.args.min_amounts_out == [16991614618808700, 21526842172308723]


def test_exit_pool_exact_single_proportional_metastable_tx(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    assets = Pool(w3, metastable_pool_pid).assets()
    token_out_address = assets[0]

    amount_out = 16991614618808700

    m = balancer.ExactSingleTokenProportionalExitSlippage(
        w3=w3,
        pool_id=metastable_pool_pid,
        avatar=avatar_address,
        token_out_address=token_out_address,
        amount_out=amount_out,
        max_slippage=0.01,
    )

    assert (
        m.data
        == "0x8bdb39131e19cf2d73a72ef1332c882f20534b6519be02760002000000000000000001120000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ae78736cd615f374d3085123a210448e74fc6393000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000003c5dc89183b17c000000000000000000000000000000000000000000000000004180771079727700000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000080b62cfc882fad0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000003c5dc89183b17c0000000000000000000000000000000000000000000000000041807710797277"
    )
    assert m.args.min_amounts_out == [16991614618808700, 18437122352050807]


def test_exit_pool_exact_single_proportional_composable_tx(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block_composable)

    assets = Pool(w3, composable_stable_pool_pid).assets()
    token_out_address = assets[1]  # [0] is the BPT itself
    amount_out = 16991614618808700

    m = balancer.ExactSingleTokenProportionalExitSlippage(
        w3=w3,
        pool_id=composable_stable_pool_pid,
        avatar=avatar_address,
        token_out_address=token_out_address,
        amount_out=amount_out,
        max_slippage=0.01,
    )

    assert (
        m.data
        == "0x8bdb391342ed016f826165c2e5976fe5bc3df540c5ad0af700000000000000000000058b0000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd4500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000042ed016f826165c2e5976fe5bc3df540c5ad0af70000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ae78736cd615f374d3085123a210448e74fc63930000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000003c5dc89183b17c0000000000000000000000000000000000000000000000000106af56e3c455fd000000000000000000000000000000000000000000000000002c0b06a154f9d900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000018ca9715faa74430000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000003c5dc89183b17c0000000000000000000000000000000000000000000000000106af56e3c455fd000000000000000000000000000000000000000000000000002c0b06a154f9d9"
    )
    assert m.args.min_amounts_out == [16991614618808700, 73939231621535229, 12397022079678937]


def test_exit_pool_exact_single_proportional_weighted_tx(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    assets = Pool(w3, weighted_pool_pid).assets()
    token_out_address = assets[1]
    amount_out = 169916146188087

    m = balancer.ExactSingleTokenProportionalExitSlippage(
        w3=w3,
        pool_id=weighted_pool_pid,
        avatar=avatar_address,
        token_out_address=token_out_address,
        amount_out=amount_out,
        max_slippage=0.01,
    )

    assert (
        m.data
        == "0x8bdb39135c6ee304399dbdb9c8ef030ab642b10820db8f560002000000000000000000140000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000003ce36bea0638d6b00000000000000000000000000000000000000000000000000009a89af88ff3700000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000001b6710de4d0af84000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000003ce36bea0638d6b00000000000000000000000000000000000000000000000000009a89af88ff37"
    )
    assert m.args.min_amounts_out == [274216819678743915, 169916146188087]


# --------------------------------------------------------------------------------------------------------------------
# Exit - Exact BPT Proportional Slippage
# --------------------------------------------------------------------------------------------------------------------


def test_exit_pool_exact_bpt_proportional_stable_tx(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    bpt_amount_in = 169916146188087

    m = balancer.ExactBptProportionalExitSlippage(
        w3=w3, pool_id=stable_pool_pid, avatar=avatar_address, bpt_amount_in=bpt_amount_in, max_slippage=0.01
    )

    assert (
        m.data
        == "0x8bdb39133dd0843a028c86e0b760b1a76929d1c5ef93a2dd0002000000000000000002490000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005c6ee304399dbdb9c8ef030ab642b10820db8f56000000000000000000000000616e8bfa43f920657b3497dbf40d6b1a02d4608d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000045c6ee796cba0000000000000000000000000000000000000000000000000000586698281ed00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000009a89af88ff37"
    )
    assert m.args.min_amounts_out == [76720706776250, 97197662674640]


def test_exit_pool_exact_bpt_proportional_metastable_tx(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    bpt_amount_in = 169916146188087

    m = balancer.ExactBptProportionalExitSlippage(
        w3=w3, pool_id=metastable_pool_pid, avatar=avatar_address, bpt_amount_in=bpt_amount_in, max_slippage=0.01
    )

    assert (
        m.data
        == "0x8bdb39131e19cf2d73a72ef1332c882f20534b6519be02760002000000000000000001120000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ae78736cd615f374d3085123a210448e74fc6393000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000004878c1aa110300000000000000000000000000000000000000000000000000004ea312ca011d0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000009a89af88ff37"
    )
    assert m.args.min_amounts_out == [79683482423555, 86462301864221]


def test_exit_pool_exact_bpt_proportional_composable_tx(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block_composable)

    bpt_amount_in = 169916146188087

    m = balancer.ExactBptProportionalExitSlippage(
        w3=w3, pool_id=composable_stable_pool_pid, avatar=avatar_address, bpt_amount_in=bpt_amount_in, max_slippage=0.01
    )

    assert (
        m.data
        == "0x8bdb391342ed016f826165c2e5976fe5bc3df540c5ad0af700000000000000000000058b0000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd4500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000042ed016f826165c2e5976fe5bc3df540c5ad0af70000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ae78736cd615f374d3085123a210448e74fc6393000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000178420d3344600000000000000000000000000000000000000000000000000006654aa8701020000000000000000000000000000000000000000000000000000112843a9f98c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000009a89af88ff37"
    )
    assert m.args.min_amounts_out == [0, 25856253834310, 112513824260354, 18864631576972]


def test_exit_pool_exact_bpt_proportional_weighted_tx(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    bpt_amount_in = 169916146188087

    m = balancer.ExactBptProportionalExitSlippage(
        w3=w3, pool_id=weighted_pool_pid, avatar=avatar_address, bpt_amount_in=bpt_amount_in, max_slippage=0.01
    )

    assert (
        m.data
        == "0x8bdb39135c6ee304399dbdb9c8ef030ab642b10820db8f560002000000000000000000140000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000157592aa24e4c0000000000000000000000000000000000000000000000000000003676f934140000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000009a89af88ff37"
    )
    assert m.args.min_amounts_out == [377515455696460, 233924277268]


# --------------------------------------------------------------------------------------------------------------------
# Exit - Exact tokens Tx
# --------------------------------------------------------------------------------------------------------------------


def test_exit_pool_exact_tokens_stable_tx(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    amounts_out = [169916146188087, 698453980146188087]

    m = balancer.ExactTokensExitSlippage(
        w3=w3, pool_id=stable_pool_pid, avatar=avatar_address, amounts_out=amounts_out, max_slippage=0.01
    )

    assert (
        m.data
        == "0x8bdb39133dd0843a028c86e0b760b1a76929d1c5ef93a2dd0002000000000000000002490000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005c6ee304399dbdb9c8ef030ab642b10820db8f56000000000000000000000000616e8bfa43f920657b3497dbf40d6b1a02d4608d000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000009a89af88ff3700000000000000000000000000000000000000000000000009b16831c2923f3700000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000976ca2fc76f322e000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000009a89af88ff3700000000000000000000000000000000000000000000000009b16831c2923f37"
    )
    assert m.args.min_amounts_out == [169916146188087, 698453980146188087]


def test_exit_pool_exact_tokens_metastable_slippage(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    amounts_out = [169916146188087, 698453980146188087]

    m = balancer.ExactTokensExitSlippage(
        w3=w3, pool_id=metastable_pool_pid, avatar=avatar_address, amounts_out=amounts_out, max_slippage=0.01
    )

    assert (
        m.data
        == "0x8bdb39131e19cf2d73a72ef1332c882f20534b6519be02760002000000000000000001120000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ae78736cd615f374d3085123a210448e74fc6393000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000009a89af88ff3700000000000000000000000000000000000000000000000009b16831c2923f3700000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000990e94a6981fe5e000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000009a89af88ff3700000000000000000000000000000000000000000000000009b16831c2923f37"
    )
    assert m.args.min_amounts_out == [169916146188087, 698453980146188087]


def test_exit_pool_exact_tokens_composable_slippage(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block_composable)

    amounts_out = [10000000000, 0, 698453980146188087000]

    m = balancer.ExactTokensExitSlippage(
        w3=w3, pool_id=composable_stable_pool_pid, avatar=avatar_address, amounts_out=amounts_out, max_slippage=0.01
    )

    assert (
        m.data
        == "0x8bdb391342ed016f826165c2e5976fe5bc3df540c5ad0af700000000000000000000058b0000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd4500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000042ed016f826165c2e5976fe5bc3df540c5ad0af70000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ae78736cd615f374d3085123a210448e74fc6393000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025dcff02600b46eed800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000296e373c511003360b000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025dcff02600b46eed8"
    )
    assert m.args.min_amounts_out == [10000000000, 0, 698453980146188087000]


def test_exit_pool_exact_tokens_weighted_tx(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(block)

    amounts_out = [81212098322152, 698453980146188087]

    m = balancer.ExactTokensExitSlippage(
        w3=w3, pool_id=weighted_pool_pid, avatar=avatar_address, amounts_out=amounts_out, max_slippage=0.01
    )

    assert (
        m.data
        == "0x8bdb39135c6ee304399dbdb9c8ef030ab642b10820db8f560002000000000000000000140000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000beceb88bf999727f52f0f8efed66d92c089bd450000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000049dcaa459ee800000000000000000000000000000000000000000000000009b16831c2923f3700000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000058b670eb1cd88b5c20000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000049dcaa459ee800000000000000000000000000000000000000000000000009b16831c2923f37"
    )
    assert m.args.min_amounts_out == [81212098322152, 698453980146188087]


def test_exit_exact_bpt_recovery_mode(local_node_eth):
    w3 = local_node_eth.w3
    local_node_eth.set_block(18408808)
    recovery_mode_pid = "0x00c2a4be503869fa751c2dbcb7156cc970b5a8da000000000000000000000477"

    bpt_amount_in = 50_000_000_000_000_000

    m = balancer.ExactBptRecoveryModeExit(
        w3=w3,
        pool_id=recovery_mode_pid,
        avatar="0xBA12222222228d8Ba445958a75a0704d566BF2C8",
        bpt_amount_in=bpt_amount_in,
    )

    assert (
        m.data
        == "0x8bdb391300c2a4be503869fa751c2dbcb7156cc970b5a8da000000000000000000000477000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c800000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000c2a4be503869fa751c2dbcb7156cc970b5a8da000000000000000000000000d4e7c1f3da1144c9e2cfd1b015eda7652b4a4399000000000000000000000000f71d0774b214c4cf51e33eb3d30ef98132e4dbaa0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000000000000b1a2bc2ec50000"
    )
    assert m.args.min_amounts_out == [0, 0, 0]
