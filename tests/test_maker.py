from decimal import Decimal

from defabipedia.maker import Abis, ContractSpecs
from defabipedia.tokens import erc20_contract
from defabipedia.types import Chain
from pytest import approx

from roles_royce import roles
from roles_royce.constants import ETHAddr
from roles_royce.protocols.eth import maker
from roles_royce.utils import to_checksum_address

from .roles import apply_presets, deploy_roles, setup_common_roles
from .utils import accounts, create_simple_safe, get_balance, local_node_eth, steal_token, top_up_address

JOIN_WSTETH_A = "0x10CD5fbe1b404B7E19Ef964B63939907bdaf42E2"  # GemJoin wstETH-A
JOIN_ETH_A = "0x2F0b23f53734252Bda2277357e97e1517d6B042A"  # ETHJoin ETH-A
ILK_WSTETH_A = "0x5753544554482d41000000000000000000000000000000000000000000000000"  # ilk wstETH-A
DS_PROXY_TEST = "0xD758500ddEc05172aaA035911387C8E0e789CF6a"
AVATAR_TEST = "0x849D52316331967b6fF1198e5E32A0eB168D039d"
URN_HANDLER_TEST = "0x903E781dC578EEe94519447a77BFCF4cE1bD107D"

# -----------------------------------------------------#
"""Unit Tests"""


# -----------------------------------------------------#
def test_approve_gem():
    method = maker.ApproveGem(gem=ETHAddr.wstETH, spender=DS_PROXY_TEST, amount=123)
    assert (
        method.data
        == "0x095ea7b3000000000000000000000000d758500ddec05172aaa035911387c8e0e789cf6a000000000000000000000000000000000000000000000000000000000000007b"
    )

    method = maker.ApproveGem(gem=ETHAddr.WETH, spender=JOIN_ETH_A, amount=123)
    assert (
        method.data
        == "0x095ea7b30000000000000000000000002f0b23f53734252bda2277357e97e1517d6b042a000000000000000000000000000000000000000000000000000000000000007b"
    )


def test_approve_dai():
    method = maker.ApproveDAI(spender=DS_PROXY_TEST, amount=123)
    assert (
        method.data
        == "0x095ea7b3000000000000000000000000d758500ddec05172aaa035911387c8e0e789cf6a000000000000000000000000000000000000000000000000000000000000007b"
    )

    method = maker.ApproveDAI(spender=ContractSpecs[Chain.ETHEREUM].DaiJoin.address, amount=123)
    assert (
        method.data
        == "0x095ea7b30000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28000000000000000000000000000000000000000000000000000000000000007b"
    )


def test_build():
    method = maker.Build()
    assert method.data == "0x8e1a55fc"


def test_proxy_action_open():
    ilk = bytes.fromhex(ILK_WSTETH_A[2:])
    method = maker.ProxyActionOpen(proxy=DS_PROXY_TEST, ilk=ilk)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000646aa3ee110000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e395753544554482d41000000000000000000000000000000000000000000000000000000000000000000000000d758500ddec05172aaa035911387c8e0e789cf6a00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_action_lock_gem():
    method = maker.ProxyActionLockGem(proxy=DS_PROXY_TEST, gem_join=JOIN_WSTETH_A, cdp_id=123, wad=123)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a43e29e5650000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e3900000000000000000000000010cd5fbe1b404b7e19ef964b63939907bdaf42e2000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_action_lock_eth():
    method = maker.ProxyActionLockETH(proxy=DS_PROXY_TEST, eth_join=JOIN_ETH_A, cdp_id=12345, value=123)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd503800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000064e205c1080000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e390000000000000000000000002f0b23f53734252bda2277357e97e1517d6b042a000000000000000000000000000000000000000000000000000000000000303900000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_action_free_gem():
    method = maker.ProxyActionFreeGem(proxy=DS_PROXY_TEST, gem_join=JOIN_WSTETH_A, cdp_id=12345, wad=123)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000846ab6a4910000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e3900000000000000000000000010cd5fbe1b404b7e19ef964b63939907bdaf42e20000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_action_free_eth():
    method = maker.ProxyActionFreeETH(proxy=DS_PROXY_TEST, eth_join=JOIN_ETH_A, cdp_id=12345, wad=123)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000847b5a3b430000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e390000000000000000000000002f0b23f53734252bda2277357e97e1517d6b042a0000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_action_draw():
    method = maker.ProxyActionDraw(proxy=DS_PROXY_TEST, cdp_id=12345, wad=123)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a49f6f3d5b0000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e3900000000000000000000000019c0976f590d67707e62397c87829d896dc0f1f10000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a280000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_action_wipe():
    method = maker.ProxyActionWipe(proxy=DS_PROXY_TEST, cdp_id=12345, wad=123)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000844b6661990000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e390000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a280000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_lock_gem_and_draw():
    method = maker.ProxyActionLockGemAndDraw(
        proxy=DS_PROXY_TEST, gem_join=JOIN_WSTETH_A, cdp_id=12345, wad_c=123, wad_d=123
    )
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd503800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000104cbd4be3f0000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e3900000000000000000000000019c0976f590d67707e62397c87829d896dc0f1f100000000000000000000000010cd5fbe1b404b7e19ef964b63939907bdaf42e20000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a280000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_lock_eth_and_draw():
    method = maker.ProxyActionLockETHAndDraw(
        proxy=DS_PROXY_TEST, eth_join=JOIN_ETH_A, cdp_id=12345, wad_d=123, value=123
    )
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c41c02d8460000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e3900000000000000000000000019c0976f590d67707e62397c87829d896dc0f1f10000000000000000000000002f0b23f53734252bda2277357e97e1517d6b042a0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a280000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_open_lock_gem_and_draw():
    ilk = bytes.fromhex(ILK_WSTETH_A[2:])
    method = maker.ProxyActionOpenLockGemAndDraw(
        proxy=DS_PROXY_TEST, gem_join=JOIN_WSTETH_A, ilk=ilk, wad_c=123, wad_d=123
    )
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd503800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000104db802a320000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e3900000000000000000000000019c0976f590d67707e62397c87829d896dc0f1f100000000000000000000000010cd5fbe1b404b7e19ef964b63939907bdaf42e20000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a285753544554482d41000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_open_lock_eth_and_draw():
    ilk = bytes.fromhex(ILK_WSTETH_A[2:])
    method = maker.ProxyActionOpenLockETHAndDraw(
        proxy=DS_PROXY_TEST, eth_join=JOIN_ETH_A, ilk=ilk, wad_d=123, value=123
    )
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c4e685cc040000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e3900000000000000000000000019c0976f590d67707e62397c87829d896dc0f1f10000000000000000000000002f0b23f53734252bda2277357e97e1517d6b042a0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a285753544554482d41000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_wipe_and_free_gem():
    method = maker.ProxyActionWipeAndFreeGem(
        proxy=DS_PROXY_TEST, gem_join=JOIN_WSTETH_A, cdp_id=12345, wad_c=123, wad_d=123
    )
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c4a6add0110000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e3900000000000000000000000010cd5fbe1b404b7e19ef964b63939907bdaf42e20000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a280000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_wipe_and_free_eth():
    method = maker.ProxyActionWipeAndFreeETH(
        proxy=DS_PROXY_TEST, eth_join=JOIN_ETH_A, cdp_id=12345, wad_c=123, wad_d=123
    )
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c4be5e6c030000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e390000000000000000000000002f0b23f53734252bda2277357e97e1517d6b042a0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a280000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_wipe_all_and_free_gem():
    method = maker.ProxyActionWipeAllAndFreeGem(proxy=DS_PROXY_TEST, gem_join=JOIN_WSTETH_A, cdp_id=12345, wad_c=123)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a4bcd6deec0000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e3900000000000000000000000010cd5fbe1b404b7e19ef964b63939907bdaf42e20000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a280000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_wipe_all_and_free_eth():
    method = maker.ProxyActionWipeAllAndFreeETH(proxy=DS_PROXY_TEST, eth_join=JOIN_ETH_A, cdp_id=12345, wad_c=123)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000082ecd135dce65fbc6dbdd0e4237e0af93ffd5038000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a46d68b70b0000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e390000000000000000000000002f0b23f53734252bda2277357e97e1517d6b042a0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a280000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_open():
    ilk = bytes.fromhex(ILK_WSTETH_A[2:])
    method = maker.Open(ilk=ilk, avatar=AVATAR_TEST)
    assert (
        method.data
        == "0x6090dec55753544554482d41000000000000000000000000000000000000000000000000000000000000000000000000849d52316331967b6ff1198e5e32a0eb168d039d"
    )


def test_join():
    method = maker.Join(assetJoin=JOIN_WSTETH_A, usr=URN_HANDLER_TEST, wad=123)
    assert (
        method.data
        == "0x3b4da69f000000000000000000000000903e781dc578eee94519447a77bfcf4ce1bd107d000000000000000000000000000000000000000000000000000000000000007b"
    )


def test_frob():
    method = maker.Frob(cdp_id=12345, dink=123, dart=123)
    assert (
        method.data
        == "0x45e6bdcd0000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007b"
    )


def test_drip():
    ilk = bytes.fromhex(ILK_WSTETH_A[2:])
    method = maker.Drip(ilk=ilk)
    assert method.data == "0x44e2a5a85753544554482d41000000000000000000000000000000000000000000000000"


def test_move():
    method = maker.Move(cdp_id=12345, avatar=AVATAR_TEST, rad=123)
    assert (
        method.data
        == "0xf9f30db60000000000000000000000000000000000000000000000000000000000003039000000000000000000000000849d52316331967b6ff1198e5e32a0eb168d039d000000000000000000000000000000000000000000000000000000000000007b"
    )


def test_hope():
    method = maker.Hope()
    assert method.data == "0xa3b22fc40000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28"


def test_exit():
    method = maker.Exit(assetJoin=JOIN_WSTETH_A, avatar=AVATAR_TEST, wad=123)
    assert (
        method.data
        == "0xef693bed000000000000000000000000849d52316331967b6ff1198e5e32a0eb168d039d000000000000000000000000000000000000000000000000000000000000007b"
    )


def test_flux():
    method = maker.Flux(cdp_id=12345, avatar=AVATAR_TEST, wad=123)
    assert (
        method.data
        == "0x9bb8f8380000000000000000000000000000000000000000000000000000000000003039000000000000000000000000849d52316331967b6ff1198e5e32a0eb168d039d000000000000000000000000000000000000000000000000000000000000007b"
    )


def test_proxy_action_join_drs():
    method = maker.ProxyActionJoinDsr(proxy=DS_PROXY_TEST, wad=123)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000007ee93aeea0a36fff2a9b95dd22bd6049ee54f26000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000649f6c3dbd0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28000000000000000000000000197e90f9fad81970ba7976f33cbd77088e5d7cf7000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_action_exit_drs():
    method = maker.ProxyActionExitDsr(proxy=DS_PROXY_TEST, wad=123)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000007ee93aeea0a36fff2a9b95dd22bd6049ee54f260000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006471006c090000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28000000000000000000000000197e90f9fad81970ba7976f33cbd77088e5d7cf7000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000"
    )


def test_proxy_action_exit_all_drs():
    method = maker.ProxyActionExitAllDsr(proxy=DS_PROXY_TEST)
    assert (
        method.data
        == "0x1cff79cd00000000000000000000000007ee93aeea0a36fff2a9b95dd22bd6049ee54f2600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000044c77843b30000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28000000000000000000000000197e90f9fad81970ba7976f33cbd77088e5d7cf700000000000000000000000000000000000000000000000000000000"
    )


def test_join_drs():
    method = maker.JoinDsr(avatar=AVATAR_TEST, wad=123)
    assert (
        method.data
        == "0x3b4da69f000000000000000000000000849d52316331967b6ff1198e5e32a0eb168d039d000000000000000000000000000000000000000000000000000000000000007b"
    )


def test_exit_drs():
    method = maker.ExitDsr(avatar=AVATAR_TEST, wad=123)
    assert (
        method.data
        == "0xef693bed000000000000000000000000849d52316331967b6ff1198e5e32a0eb168d039d000000000000000000000000000000000000000000000000000000000000007b"
    )


def test_exit_all_drs():
    method = maker.ExitAllDsr(avatar=AVATAR_TEST)
    assert method.data == "0xeb0dff66000000000000000000000000849d52316331967b6ff1198e5e32a0eb168d039d"


# -----------------------------------------------------#
"""Integration Tests"""


# -----------------------------------------------------#
def test_integration_maker_cdp_module_proxy(local_node_eth, accounts):
    w3 = local_node_eth.w3
    safe = create_simple_safe(w3=w3, owner=accounts[0])
    roles_ctract = deploy_roles(avatar=safe.address, w3=w3)
    setup_common_roles(safe, roles_ctract)

    # Build proxy
    build_receipt = safe.send([maker.Build()]).receipt
    for log in build_receipt["logs"]:
        if log["topics"][0].hex() == "0x259b30ca39885c6d801a0b5dbc988640f3c25e2f37531fe138c5c5af8955d41b":  # Created
            proxy_address = to_checksum_address("0x" + log["data"].hex()[26:66])
            break

    gem_join_contract = w3.eth.contract(address=JOIN_WSTETH_A, abi=Abis[Chain.ETHEREUM].GemJoin.abi)
    gem = gem_join_contract.functions.gem().call()
    ilk = gem_join_contract.functions.ilk().call()

    presets = """{"version": "1.0","chainId": "1","meta":{ "description": "","txBuilderVersion": "1.8.0"},"createdAt": 1695904723785,"transactions": [
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e82669500000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f095ea7b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cd758500ddec05172aaa035911387c8e0e789cf6a","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e8266950000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2095ea7b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cd758500ddec05172aaa035911387c8e0e789cf6a","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e8266950000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d758500ddec05172aaa035911387c8e0e789cf6a","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d758500ddec05172aaa035911387c8e0e789cf6a1cff79cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cecd135dce65fbc6dbdd0e4237e0af93ffd5038","value": "0"}
    ]}"""
    apply_presets(
        safe,
        roles_ctract,
        json_data=presets,
        replaces=[
            ("c01318bab7ee1f5ba734172bf7718b5dc6ec90e1", safe.address[2:]),
            ("c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", gem[2:]),
            ("d758500ddec05172aaa035911387c8e0e789cf6a", proxy_address[2:]),
        ],
    )

    # steal wstETH
    steal_token(
        w3,
        token=ETHAddr.wstETH,
        holder="0x6cE0F913F035ec6195bC3cE885aec4C66E485BC4",
        to=safe.address,
        amount=1000_000_000_000_000_000_000,
    )
    # approve gem
    approve_gem = maker.ApproveGem(gem=gem, spender=proxy_address, amount=1000_000_000_000_000_000_000)
    roles.send([approve_gem], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)

    gem_contract = erc20_contract(w3, gem)
    gem_allowance = gem_contract.functions.allowance(safe.address, proxy_address).call()
    assert gem_allowance == 1000_000_000_000_000_000_000

    # open cdp
    open_cdp = maker.ProxyActionOpen(proxy=proxy_address, ilk=ilk)
    send_open_cdp = roles.send(
        [open_cdp], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3
    )

    cdp_id = None
    for log in send_open_cdp["logs"]:
        if log["topics"][0].hex() == "0xd6be0bc178658a382ff4f91c8c68b542aa6b71685b8fe427966b87745c3ea7a2":  # NewCdp
            cdp_id = int(log["topics"][3].hex(), 16)
            # print('CDP ID: ', cdp_id)
            break

    assert cdp_id

    # lockGem
    lock_gem = maker.ProxyActionLockGem(
        proxy=proxy_address, gem_join=JOIN_WSTETH_A, cdp_id=cdp_id, wad=1000_000_000_000_000_000_000
    )
    roles.send([lock_gem], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)

    cdp_manager_contract = ContractSpecs[Chain.ETHEREUM].CdpManager.contract(w3)
    urn_handler = cdp_manager_contract.functions.urns(cdp_id).call()
    vat_contract = ContractSpecs[Chain.ETHEREUM].Vat.contract(w3)
    locked_gem = vat_contract.functions.urns(ilk, urn_handler).call()[0]
    assert locked_gem == 1000_000_000_000_000_000_000

    # draw DAI
    draw_dai = maker.ProxyActionDraw(proxy=proxy_address, cdp_id=cdp_id, wad=100_000_000_000_000_000_000_000)
    roles.send([draw_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == 100_000_000_000_000_000_000_000

    # approve DAI
    approve_dai = maker.ApproveDAI(spender=proxy_address, amount=100_000_000_000_000_000_000_000)
    roles.send([approve_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_contract = erc20_contract(w3, ETHAddr.DAI)

    dai_allowance = dai_contract.functions.allowance(safe.address, proxy_address).call()
    assert dai_allowance == 100_000_000_000_000_000_000_000

    # wipe DAI
    wipe_dai = maker.ProxyActionWipe(proxy=proxy_address, cdp_id=cdp_id, wad=100_000_000_000_000_000_000_000)
    roles.send([wipe_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == 0

    # freeGem
    free_gem = maker.ProxyActionFreeGem(
        proxy=proxy_address, gem_join=JOIN_WSTETH_A, cdp_id=cdp_id, wad=1000_000_000_000_000_000_000
    )
    roles.send([free_gem], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    locked_gem = vat_contract.functions.urns(ilk, urn_handler).call()[0]
    assert locked_gem == 0


def test_integration_maker_cdp_module_proxy_bulk(local_node_eth, accounts):
    w3 = local_node_eth.w3
    safe = create_simple_safe(w3=w3, owner=accounts[0])
    roles_ctract = deploy_roles(avatar=safe.address, w3=w3)
    setup_common_roles(safe, roles_ctract)

    # Build proxy
    build_receipt = safe.send([maker.Build()]).receipt
    for log in build_receipt["logs"]:
        if log["topics"][0].hex() == "0x259b30ca39885c6d801a0b5dbc988640f3c25e2f37531fe138c5c5af8955d41b":  # Created
            proxy_address = to_checksum_address("0x" + log["data"].hex()[26:66])
            break

    eth_join_contract = w3.eth.contract(address=JOIN_ETH_A, abi=Abis[Chain.ETHEREUM].GemJoin.abi)
    ilk = eth_join_contract.functions.ilk().call()

    presets = """{"version": "1.0","chainId": "1","meta":{ "description": "","txBuilderVersion": "1.8.0"},"createdAt": 1695904723785,"transactions": [
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e82669500000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f095ea7b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cd758500ddec05172aaa035911387c8e0e789cf6a","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e8266950000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2095ea7b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cd758500ddec05172aaa035911387c8e0e789cf6a","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e8266950000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d758500ddec05172aaa035911387c8e0e789cf6a","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d758500ddec05172aaa035911387c8e0e789cf6a1cff79cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cecd135dce65fbc6dbdd0e4237e0af93ffd5038","value": "0"}
    ]}"""
    apply_presets(
        safe,
        roles_ctract,
        json_data=presets,
        replaces=[
            ("c01318bab7ee1f5ba734172bf7718b5dc6ec90e1", safe.address[2:]),
            ("d758500ddec05172aaa035911387c8e0e789cf6a", proxy_address[2:]),
        ],
    )

    # Tops up the safe with 1000 ETH and adds the difference between the initial 100 ETH and the current balance
    eth_balance = w3.eth.get_balance(safe.address)
    top_up_address(w3, address=safe.address, amount=1000 + (100 - (eth_balance / 10**18)))
    eth_balance = w3.eth.get_balance(safe.address)
    assert eth_balance == approx(1100_000_000_000_000_000_000)

    # open cdp, lockETH and draw DAI
    wad_c = 500_000_000_000_000_000_000
    wad_d = 50_000_000_000_000_000_000_000
    open_lock_eth_and_draw = maker.ProxyActionOpenLockETHAndDraw(
        proxy=proxy_address, ilk=ilk, eth_join=JOIN_ETH_A, wad_d=wad_d, value=wad_c
    )
    tx_receipt = roles.send(
        [open_lock_eth_and_draw], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3
    )
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == wad_d
    cdp_id = None
    for log in tx_receipt["logs"]:
        if log["topics"][0].hex() == "0xd6be0bc178658a382ff4f91c8c68b542aa6b71685b8fe427966b87745c3ea7a2":  # NewCdp
            cdp_id = int(log["topics"][3].hex(), 16)
            break
    assert cdp_id

    # lockETH and draw DAI
    lock_eth_and_draw = maker.ProxyActionLockETHAndDraw(
        proxy=proxy_address, eth_join=JOIN_ETH_A, cdp_id=cdp_id, wad_d=wad_d, value=wad_c
    )
    roles.send(
        [lock_eth_and_draw], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3
    )
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == 2 * wad_d
    eth_balance = w3.eth.get_balance(safe.address)
    assert eth_balance == approx(100_000_000_000_000_000_000)

    # Wipe DAI and free ETH
    approve_dai = maker.ApproveDAI(spender=proxy_address, amount=wad_d)
    roles.send([approve_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_contract = erc20_contract(w3, ETHAddr.DAI)
    dai_allowance = dai_contract.functions.allowance(safe.address, proxy_address).call()
    assert dai_allowance == wad_d
    wipe_and_free_eth = maker.ProxyActionWipeAndFreeETH(
        proxy=proxy_address, eth_join=JOIN_ETH_A, cdp_id=cdp_id, wad_c=wad_c, wad_d=wad_d
    )
    roles.send(
        [wipe_and_free_eth], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3
    )
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == wad_d
    eth_balance = w3.eth.get_balance(safe.address)
    assert eth_balance == approx(600_000_000_000_000_000_000)

    # Wipe All DAI and free ETH
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    # Logic to get the amount of DAI to wipe
    RAY = 10**27
    cdp_manager_contract = w3.eth.contract(
        address=ContractSpecs[Chain.ETHEREUM].CdpManager.address, abi=ContractSpecs[Chain.ETHEREUM].CdpManager.abi
    )
    urn_handler = cdp_manager_contract.functions.urns(cdp_id).call()
    vat_contract = w3.eth.contract(
        address=ContractSpecs[Chain.ETHEREUM].Vat.address, abi=ContractSpecs[Chain.ETHEREUM].Vat.abi
    )
    rate = vat_contract.functions.ilks(ilk).call()[1]
    art = vat_contract.functions.urns(ilk, urn_handler).call()[1]
    urn_dai = vat_contract.functions.dai(urn_handler).call()
    rad = int((Decimal(art) * Decimal(rate)) - Decimal(urn_dai))
    dai_to_wipe = int(Decimal(rad) / Decimal(RAY))
    if (dai_to_wipe * RAY) < rad:
        dai_to_wipe += 1
    # Steal amount of DAI to wipe all
    steal_token(
        w3,
        token=ETHAddr.DAI,
        holder="0x60FaAe176336dAb62e284Fe19B885B095d29fB7F",
        to=safe.address,
        amount=dai_to_wipe - dai_balance,
    )
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == dai_to_wipe
    approve_dai = maker.ApproveDAI(spender=proxy_address, amount=dai_to_wipe)
    roles.send([approve_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    wipe_all_and_free_eth = maker.ProxyActionWipeAllAndFreeETH(
        proxy=proxy_address, eth_join=JOIN_ETH_A, cdp_id=cdp_id, wad_c=wad_c
    )
    roles.send(
        [wipe_all_and_free_eth], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3
    )
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == 0
    eth_balance = w3.eth.get_balance(safe.address)
    assert eth_balance == approx(1100_000_000_000_000_000_000)


def test_integration_maker_cdp_module_no_proxy(local_node_eth, accounts):
    w3 = local_node_eth.w3
    safe = create_simple_safe(w3=w3, owner=accounts[0])
    roles_ctract = deploy_roles(avatar=safe.address, w3=w3)
    setup_common_roles(safe, roles_ctract)

    gem_join_contract = w3.eth.contract(address=JOIN_WSTETH_A, abi=Abis[Chain.ETHEREUM].GemJoin.abi)
    gem = gem_join_contract.functions.gem().call()
    ilk = gem_join_contract.functions.ilk().call()

    presets = """{"version": "1.0","chainId": "1","meta":{ "description": "","txBuilderVersion": "1.8.0"},"createdAt": 1695904723785,"transactions": [
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e82669500000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0095ea7b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001ccd5fbe1b404b7e19ef964b63939907bdaf42e2","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e82669500000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f095ea7b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001ca6ac90977b93b58547b4a71c78317f391a28","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e82669500000000000000000000000000000000000000000000000000000000000000010000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e39","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e396090dec5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001cc01318bab7ee1f5ba734172bf7718b5dc6ec90e1","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x2fcf52d100000000000000000000000000000000000000000000000000000000000000010000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e3945e6bdcd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x2fcf52d100000000000000000000000000000000000000000000000000000000000000010000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e39f9f30db6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000005ef30b9986345249bc32d8928b7ee64de9435e399bb8f838000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001cc01318bab7ee1f5ba734172bf7718b5dc6ec90e1","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e826695000000000000000000000000000000000000000000000000000000000000000100000000000000000000000010cd5fbe1b404b7e19ef964b63939907bdaf42e2","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x2fcf52d1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000010cd5fbe1b404b7e19ef964b63939907bdaf42e23b4da69f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000010cd5fbe1b404b7e19ef964b63939907bdaf42e2ef693bed0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cc01318bab7ee1f5ba734172bf7718b5dc6ec90e1","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e82669500000000000000000000000000000000000000000000000000000000000000010000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x2fcf52d100000000000000000000000000000000000000000000000000000000000000010000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a283b4da69f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28ef693bed0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c01318bab7ee1f5ba734172bf7718b5dc6ec90e1","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e826695000000000000000000000000000000000000000000000000000000000000000100000000000000000000000019c0976f590d67707e62397c87829d896dc0f1f1","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x2fcf52d1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000019c0976f590d67707e62397c87829d896dc0f1f144e2a5a8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e826695000000000000000000000000000000000000000000000000000000000000000100000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492ba3b22fc40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001ca6ac90977b93b58547b4a71c78317f391a28","value": "0"}
    ]}"""
    apply_presets(
        safe,
        roles_ctract,
        json_data=presets,
        replaces=[
            ("c01318bab7ee1f5ba734172bf7718b5dc6ec90e1", safe.address[2:]),
            ("7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0", gem[2:]),
            ("10cd5fbe1b404b7e19ef964b63939907bdaf42e2", gem_join_contract.address[2:]),
        ],
    )

    # steal wstETH
    steal_token(
        w3,
        token=ETHAddr.wstETH,
        holder="0x6cE0F913F035ec6195bC3cE885aec4C66E485BC4",
        to=safe.address,
        amount=1000_000_000_000_000_000_000,
    )
    # approve gem
    approve_gem = maker.ApproveGem(gem=gem, spender=gem_join_contract.address, amount=1000_000_000_000_000_000_000)
    roles.send([approve_gem], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)

    gem_contract = erc20_contract(w3, gem)
    gem_allowance = gem_contract.functions.allowance(safe.address, gem_join_contract.address).call()
    assert gem_allowance == 1000_000_000_000_000_000_000

    # open cdp
    open_cdp = maker.Open(ilk=ilk, avatar=safe.address)
    send_open_cdp = roles.send(
        [open_cdp], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3
    )

    cdp_id = None
    for log in send_open_cdp["logs"]:
        if log["topics"][0].hex() == "0xd6be0bc178658a382ff4f91c8c68b542aa6b71685b8fe427966b87745c3ea7a2":  # NewCdp
            cdp_id = int(log["topics"][3].hex(), 16)
            # print('CDP ID: ', cdp_id)
            break

    assert cdp_id

    # lockGem
    wad_gem = 1000_000_000_000_000_000_000
    cdp_manager_contract = ContractSpecs[Chain.ETHEREUM].CdpManager.contract(w3)
    urn_handler = cdp_manager_contract.functions.urns(cdp_id).call()
    join_lock_gem = maker.Join(assetJoin=gem_join_contract.address, usr=urn_handler, wad=wad_gem)
    roles.send([join_lock_gem], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    frob_lock_gem = maker.Frob(cdp_id=cdp_id, dink=wad_gem, dart=0)
    roles.send([frob_lock_gem], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    vat_contract = ContractSpecs[Chain.ETHEREUM].Vat.contract(w3)
    locked_gem = vat_contract.functions.urns(ilk, urn_handler).call()[0]
    assert locked_gem == wad_gem

    # draw DAI
    RAY = 10**27
    wad_dai = 100_000_000_000_000_000_000_000
    jug_contract = ContractSpecs[Chain.ETHEREUM].Jug.contract(w3)
    drip = maker.Drip(ilk=ilk)
    roles.send([drip], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    rate_jug = jug_contract.functions.drip(ilk).call()
    rate_vat = vat_contract.functions.ilks(ilk).call()[1]
    assert rate_jug == rate_vat

    urn_dai = vat_contract.functions.dai(urn_handler).call()

    if urn_dai < (RAY * wad_dai):
        dart = int(((Decimal(RAY) * Decimal(wad_dai)) - urn_dai) / Decimal(rate_jug))
        if dart * rate_jug < RAY * wad_dai:
            dart += 1

    frob_draw = maker.Frob(cdp_id=cdp_id, dink=0, dart=dart)
    roles.send([frob_draw], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    # variable that has 45 decimal places
    rad = wad_dai * 10**27  # 45 = 18 + 27
    move = maker.Move(cdp_id=cdp_id, avatar=safe.address, rad=rad)
    roles.send([move], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    hope = maker.Hope()
    roles.send([hope], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    exit_draw = maker.Exit(assetJoin=ContractSpecs[Chain.ETHEREUM].DaiJoin.address, avatar=safe.address, wad=wad_dai)
    roles.send([exit_draw], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == wad_dai

    # wipeDAI / repayDAI
    wad_dai = 50_000_000_000_000_000_000_000
    approve_dai = maker.ApproveDAI(spender=ContractSpecs[Chain.ETHEREUM].DaiJoin.address, amount=wad_dai)
    roles.send([approve_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    join_wipe = maker.Join(assetJoin=ContractSpecs[Chain.ETHEREUM].DaiJoin.address, usr=urn_handler, wad=wad_dai)
    roles.send([join_wipe], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    rate = vat_contract.functions.ilks(ilk).call()[1]
    art = vat_contract.functions.urns(ilk, urn_handler).call()[1]
    urn_dai = vat_contract.functions.dai(urn_handler).call()

    dart = int(Decimal(urn_dai) / Decimal(rate))
    if dart < art:
        dart = -dart
    else:
        dart = -int(art)

    frob_wipe = maker.Frob(cdp_id=cdp_id, dink=0, dart=dart)
    roles.send([frob_wipe], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == wad_dai

    # wipeAll / repayAllDAI
    rate = vat_contract.functions.ilks(ilk).call()[1]
    art = vat_contract.functions.urns(ilk, urn_handler).call()[1]
    urn_dai = vat_contract.functions.dai(urn_handler).call()
    rad = int((Decimal(art) * Decimal(rate)) - Decimal(urn_dai))
    wad_dai = int(Decimal(rad) / Decimal(RAY))

    if (wad_dai * RAY) < rad:
        wad_dai += 1

    approve_dai = maker.ApproveDAI(spender=ContractSpecs[Chain.ETHEREUM].DaiJoin.address, amount=wad_dai)
    roles.send([approve_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    join_wipe_all = maker.Join(assetJoin=ContractSpecs[Chain.ETHEREUM].DaiJoin.address, usr=urn_handler, wad=wad_dai)
    roles.send([join_wipe_all], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    art = vat_contract.functions.urns(ilk, urn_handler).call()[1]
    frob_wipe_all = maker.Frob(cdp_id=cdp_id, dink=0, dart=-art)
    roles.send([frob_wipe_all], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == 0

    # freeGem
    wad_gem = 1000_000_000_000_000_000_000
    frob_free_gem = maker.Frob(cdp_id=cdp_id, dink=-wad_gem, dart=0)
    roles.send([frob_free_gem], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    flux = maker.Flux(cdp_id=cdp_id, avatar=safe.address, wad=wad_gem)
    roles.send([flux], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    exit_free_gem = maker.Exit(assetJoin=gem_join_contract.address, avatar=safe.address, wad=wad_gem)
    roles.send([exit_free_gem], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    locked_gem = vat_contract.functions.urns(ilk, urn_handler).call()[0]
    gem_balance = get_balance(w3=w3, token=gem, address=safe.address)
    assert locked_gem == 0
    assert gem_balance == wad_gem


def test_integration_maker_dsr_module_proxy(local_node_eth, accounts):
    w3 = local_node_eth.w3
    safe = create_simple_safe(w3=w3, owner=accounts[0])
    roles_ctract = deploy_roles(avatar=safe.address, w3=w3)
    setup_common_roles(safe, roles_ctract)

    # Build proxy
    build_receipt = safe.send([maker.Build()]).receipt
    for log in build_receipt["logs"]:
        if log["topics"][0].hex() == "0x259b30ca39885c6d801a0b5dbc988640f3c25e2f37531fe138c5c5af8955d41b":  # Created
            proxy_address = to_checksum_address("0x" + log["data"].hex()[26:66])
            break

    presets = """{"version": "1.0","chainId": "1","meta":{ "description": "","txBuilderVersion": "1.8.0"},"createdAt": 1695904723785,"transactions": [
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e82669500000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f095ea7b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cd758500ddec05172aaa035911387c8e0e789cf6a","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e8266950000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d758500ddec05172aaa035911387c8e0e789cf6a","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d758500ddec05172aaa035911387c8e0e789cf6a1cff79cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cee93aeea0a36fff2a9b95dd22bd6049ee54f26","value": "0"}
    ]}"""
    apply_presets(
        safe,
        roles_ctract,
        json_data=presets,
        replaces=[
            ("c01318bab7ee1f5ba734172bf7718b5dc6ec90e1", safe.address[2:]),
            ("d758500ddec05172aaa035911387c8e0e789cf6a", proxy_address[2:]),
        ],
    )

    # steal DAI
    steal_token(
        w3,
        token=ETHAddr.DAI,
        holder="0x60FaAe176336dAb62e284Fe19B885B095d29fB7F",
        to=safe.address,
        amount=100_000_000_000_000_000_000_000,
    )

    pot_contract = ContractSpecs[Chain.ETHEREUM].Pot.contract(w3)

    # approve DAI
    approve_dai = maker.ApproveDAI(spender=proxy_address, amount=100_000_000_000_000_000_000_000)
    roles.send([approve_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_contract = erc20_contract(w3, ETHAddr.DAI)
    dai_allowance = dai_contract.functions.allowance(safe.address, proxy_address).call()
    assert dai_allowance == 100_000_000_000_000_000_000_000

    # join DAI
    join_dai = maker.ProxyActionJoinDsr(proxy=proxy_address, wad=100_000_000_000_000_000_000_000)
    roles.send([join_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == 0
    pie = pot_contract.functions.pie(proxy_address).call()
    chi = pot_contract.functions.chi().call() / (10**27)
    assert pie * chi == approx(100_000_000_000_000_000_000_000)

    # exit DAI
    exit_dai = maker.ProxyActionExitDsr(proxy=proxy_address, wad=50_000_000_000_000_000_000_000)
    roles.send([exit_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == approx(50_000_000_000_000_000_000_000)
    pie = pot_contract.functions.pie(proxy_address).call()
    chi = pot_contract.functions.chi().call() / (10**27)
    assert pie * chi == approx(50_000_000_000_000_000_000_000)

    # exitAll DAI
    exit_all_dai = maker.ProxyActionExitAllDsr(proxy=proxy_address)
    roles.send([exit_all_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == approx(100_000_000_000_000_000_000_000)
    pie = pot_contract.functions.pie(proxy_address).call()
    assert pie == 0


def test_integration_maker_dsr_module_no_proxy(local_node_eth, accounts):
    w3 = local_node_eth.w3
    safe = create_simple_safe(w3=w3, owner=accounts[0])
    roles_ctract = deploy_roles(avatar=safe.address, w3=w3)
    setup_common_roles(safe, roles_ctract)

    presets = """{"version": "1.0","chainId": "1","meta":{ "description": "","txBuilderVersion": "1.8.0"},"createdAt": 1695904723785,"transactions": [
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e82669500000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f095ea7b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cbfe1146fb49989fc222523f83081ddb","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x5e8266950000000000000000000000000000000000000000000000000000000000000001000000000000000000000000373238337bfe1146fb49989fc222523f83081ddb","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000373238337bfe1146fb49989fc222523f83081ddb3b4da69f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cc01318bab7ee1f5ba734172bf7718b5dc6ec90e1","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000373238337bfe1146fb49989fc222523f83081ddbef693bed0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cc01318bab7ee1f5ba734172bf7718b5dc6ec90e1","value": "0"},
    {"to": "0x1ffAdc16726dd4F91fF275b4bF50651801B06a86","data": "0x33a0480c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000373238337bfe1146fb49989fc222523f83081ddbeb0dff660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001cc01318bab7ee1f5ba734172bf7718b5dc6ec90e1","value": "0"}
    ]}"""
    apply_presets(
        safe, roles_ctract, json_data=presets, replaces=[("c01318bab7ee1f5ba734172bf7718b5dc6ec90e1", safe.address[2:])]
    )

    # steal DAI
    steal_token(
        w3,
        token=ETHAddr.DAI,
        holder="0x60FaAe176336dAb62e284Fe19B885B095d29fB7F",
        to=safe.address,
        amount=100_000_000_000_000_000_000_000,
    )

    dsr_manager_contract = ContractSpecs[Chain.ETHEREUM].DsrManager.contract(w3)
    pot_contract = ContractSpecs[Chain.ETHEREUM].Pot.contract(w3)

    # approve DAI
    approve_dai = maker.ApproveDAI(
        spender=ContractSpecs[Chain.ETHEREUM].DsrManager.address, amount=100_000_000_000_000_000_000_000
    )
    roles.send([approve_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_contract = erc20_contract(w3, ETHAddr.DAI)
    dai_allowance = dai_contract.functions.allowance(
        safe.address, ContractSpecs[Chain.ETHEREUM].DsrManager.address
    ).call()
    assert dai_allowance == 100_000_000_000_000_000_000_000

    # join DAI
    join_dai = maker.JoinDsr(avatar=safe.address, wad=100_000_000_000_000_000_000_000)
    roles.send([join_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == 0
    pie = dsr_manager_contract.functions.pieOf(safe.address).call()
    chi = pot_contract.functions.chi().call() / (10**27)
    assert pie * chi == approx(100_000_000_000_000_000_000_000)

    # exit DAI
    exit_dai = maker.ExitDsr(avatar=safe.address, wad=50_000_000_000_000_000_000_000)
    roles.send([exit_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == approx(50_000_000_000_000_000_000_000)
    pie = dsr_manager_contract.functions.pieOf(safe.address).call()
    chi = pot_contract.functions.chi().call() / (10**27)
    assert pie * chi == approx(50_000_000_000_000_000_000_000)

    # exitAll DAI
    exit_all_dai = maker.ExitAllDsr(avatar=safe.address)
    roles.send([exit_all_dai], role=1, private_key=accounts[1].key, roles_mod_address=roles_ctract.address, web3=w3)
    dai_balance = get_balance(w3=w3, token=ETHAddr.DAI, address=safe.address)
    assert dai_balance == approx(100_000_000_000_000_000_000_000)
    pie = dsr_manager_contract.functions.pieOf(safe.address).call()
    assert pie == 0
